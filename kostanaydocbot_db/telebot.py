#!# -*- coding: utf-8 -*-
# This module provides search information about doctors in kostanay for  Telegram Bot using
# official python-telegram-bot library
# Copyright (C) 2021
# RoboInterativo  <info@robointerativo>
# Aleksey Shilo  <alex.pricker@gmail.com>
# for information use this bot https://web.telegram.org/#/im?p=@robointerativobot
# –î–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–∑–Ω–∞—Ç—å –∞–¥—Ä–µ—Å–∞ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –≤—Ä–∞—á–µ –≤ –≥. –ö–æ—Å—Ç–∞–Ω–∞–π —á–µ—Ä–µ–∑
#  –±–æ—Ç  Telegram
# –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É python-telegram-bot library
# Copyright (C) 2021
# RoboInterativo  <info@robointerativo>
# –ê–ª–µ–∫—Å–µ–π –®–∏–ª–æ  <alex.pricker@gmail.com>
# –î–ª—è —Å–ø—Ä–∞–≤–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç  https://web.telegram.org/#/im?p=@robointerativobot
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser Public License for more details.
#
# You should have received a copy of the GNU Lesser Public License
# along with this program.  If not, see [http://www.gnu.org/licenses/].
"""
Usage:
Press Ctrl-C on the command line or send a signal to the process to stop the
bot.
"""
import requests
import os
from lxml import etree, html
import urllib3
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
import yaml
from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    CallbackContext,
)


# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)



LOGGER = logging.getLogger(__name__)

with open('./config.yml', 'w') as f:

    if os.environ.get('TOKEN') != None:
        config = {'token': os.environ.get('TOKEN')}
        f.write(yaml.dump(config))
        f.close()
    else:

        print(_('''
        –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è TOKEN
        –¥–ª—è –µ–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ù–∞–±–µ—Ä–∏
        export TOKEN=TOKEN_VALUE
        –∏ –ø–æ–ø—Ä–æ–±—É–π –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–Ω–æ–≤–∞.
        '''))
        sys.exit(1)
with open('./config.yml') as f:
    config = yaml.safe_load(f)
    f.close()

# Stages
START_KEYBOARD = range(1)
# Callback data

#         InlineKeyboardButton("‚èÆ", callback_data=str(PAGE1)),
#         InlineKeyboardButton("‚è™", callback_data=str(PAGE2)),
#         InlineKeyboardButton("‚è©", callback_data=str(PAGE4))


def get_links():
    """
    Represent function for loading information from 'https://vrachi-kostanay.kz
    website , links for button.

    –§—É–Ω—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç c 'https://vrachi-kostanay.kz –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Å—ã–ª–∫–∞—Ö,
    –æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –º–µ–Ω—é –±–æ—Ç–∞.

    """
    user_agent = {'User-agent': 'Mozilla/5.0'}
    r = requests.get(headers=user_agent, url='https://vrachi-kostanay.kz')
    h = html.fromstring(r.text)
    body = h.getchildren()[1]
    blok = body.find_class('blk blk_button')
    links = []
    num = 0
    for bl in blok[1:43]:
        d = {}
        link = bl.find_class('btn-new block-content')[0]
        url = urllib3.util.parse_url(link.attrib.get('href'))
        d['path'] = url.path.strip('/')
        d['text'] = link.text
        d['num'] = num
        links.append(d)
        num = num+1
    return links






#‚è≠‚èÆ‚è©‚è™‚è´‚è¨‚óÄÔ∏èüîºüîΩ‚û°Ô∏è‚¨ÖÔ∏è‚¨ÜÔ∏è‚¨áÔ∏è
def show_doctor(link):
    """
    Represent function for get info about specific doctor from
     'https://vrachi-kostanay.kz using link argument for get it
    website , links for button.

    –§—É–Ω—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç c 'https://vrachi-kostanay.kz –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –≤—Ä–∞—á–µ,
    link - –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–∞—á–∞.

    """
    user_agent = {'User-agent': 'Mozilla/5.0'}
    r = requests.get(headers=user_agent, url='https://vrachi-kostanay.kz/{}'.format(link))
    h = html.fromstring(r.text)
    body = h.getchildren()[1]
    doc_score = len(body.find_class('blk_box_self'))
    tel_mes = ''
    for el in range(doc_score):
        blok = body.find_class('blk_box_self')
        a = blok[el].find_class('blk_text')[0].getchildren()[0].getchildren()[0].getchildren()[0]
        b = etree.tostring(a, encoding='UTF-8')
        tel = blok[el].find_class('btn-new block-content')[0]
        telephone = tel.attrib['href'].replace('tel:', '')#.replace('+','%2b')
        t = b.decode('UTF-8').replace(u'</b>', '').replace(u'<b>', '').replace(u'<br/>', '\n')
        t2 = t + '\n' + '\n' + '–¢–µ–ª–µ—Ñ–æ–Ω: {}'.format(telephone)
        tel_mes = tel_mes+'\n'+t2

    return tel_mes
        #–ó–¥–µ—Å—å —Ö–æ—Ç–µ–ª —Å–¥–µ–ª–∞—Ç—å —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º


def start(update: Update, _: CallbackContext) -> int:
    """Send message on `/start`."""
    # Get user that sent /start and log his name
    user = update.message.from_user
    logger.info(
        '–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç "–í—Ä–∞—á–∏ –ö–æ—Å—Ç–∞–Ω–∞–π". –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Ä–∞—á–∞:',
        user.first_name
        )




    reply_markup = InlineKeyboardMarkup(LINK_PAGE[0])
    # Send message with text and appended InlineKeyboard
    update.message.reply_text("Start handler, Choose a route", reply_markup=reply_markup)
    # Tell ConversationHandler that we're in state `FIRST` now
    return START_KEYBOARD


def zero_page(update: Update, _: CallbackContext) -> int:
    """Send message on `0 page callback send send page1 of doctors list `."""
    # Get user that sent /start and log his name
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –º–µ–Ω—é –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—á–µ"""
    query = update.callback_query
    query.answer()


    reply_markup = InlineKeyboardMarkup(LINK_PAGE[0])

    # Send message with text and appended InlineKeyboard
    query.edit_message_text(text="Start handler, Choose a route", reply_markup=reply_markup)
    # Tell ConversationHandler that we're in state `FIRST` now
    return START_KEYBOARD

def pages(update: Update, _: CallbackContext) -> int:
    """Send message to user list menu of doctors , callback_data for ident page """
    # Get user that sent /start and log his name
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π.
    callback_data - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞
    """
    query = update.callback_query
    query_data = query.data
    query.answer()



    reply_markup = InlineKeyboardMarkup(LINK_PAGE[int(query_data)])
    # Send message with text and appended InlineKeyboard
    query.edit_message_text(text="Start handler, Choose a route", reply_markup=reply_markup)
    # Tell ConversationHandler that we're in state `FIRST` now
    return START_KEYBOARD



def doctor(update: Update, _: CallbackContext) -> int:
    """Send message to user about specific doctor user callback_data for ident """
    # Get user that sent /start and log his name
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –≤—Ä–∞—á–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    callback_data - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Ä–∞—á–∞
    """
    query = update.callback_query
    #query.edit_message_text(text="Selected option: {}".format(query.data))
    query_data = query.data
    text = show_doctor(query_data)
    query.answer()


    keyboard = [[InlineKeyboardButton("‚èÆ –ù–∞–∑–∞–¥", callback_data='start')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    # Send message with text and appended InlineKeyboard
    query.edit_message_text(text=text, reply_markup=reply_markup)
    # Tell ConversationHandler that we're in state `FIRST` now
    return START_KEYBOARD

def get_keyboard(links):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ get_links() –º–µ–Ω—é —Ä–∞–∑–±–∏—Ç–æ–µ –Ω–∞
    —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∏ —Å–ø–∏—Å–æ–∫ CallbackQueryHandlers –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç—Ç–æ–≥–æ –º–µ–Ω—é
    ConversationHandler –æ–º

    Create Menu of docts list  get_links() devided by pages and
    CallbackQueryHandler`s list for ConversationHandler object
    """

    link_page = []
    link_pages = []
    num = 0
    st_keyboard = [CallbackQueryHandler(zero_page, pattern='^' + 'start' + '$')]

    for link in links:
        st_keyboard.append(CallbackQueryHandler(doctor, pattern='^' + link['path'] + '$'))
        if len(link_page) == 10:
            st_keyboard.append(CallbackQueryHandler(pages, pattern='^' + str(num) + '$'))
            if num == 0:
                button = [
                    InlineKeyboardButton("‚è©", callback_data=str(num+1))
                    ]
            else:
                button = [
                    InlineKeyboardButton("‚èÆ", callback_data='0'),
                    InlineKeyboardButton("‚è™", callback_data=str(num-1)),
                    InlineKeyboardButton("‚è©", callback_data=str(num+1))
                    ]

            link_page.append(button)
            link_pages.append(link_page)
            link_page = []
            num = num + 1
        else:
            button = [
                InlineKeyboardButton(link['text'], bcallback_data=link['path'])
                ]
            link_page.append(button)



    if len(link_page) > 0:
        st_keyboard.append(
            CallbackQueryHandler(pages,
                                 pattern='^' + str(num) + '$'))
        button = [
            InlineKeyboardButton("‚èÆ", callback_data='0'),
            InlineKeyboardButton("‚è™", callback_data=str(num-1))

            ]

        link_page.append(button)
        link_pages.append(link_page)
        link_page = []
        link_pages.append(link_pages)
    return link_pages, st_keyboard



# TOKEN = '1718699727:AAFDW6A4Pq1iISUmM4CaySbIlah4VrGLYhI'
TOKEN = config['token']
LINK_PAGE, start_keyboard = get_keyboard(get_links())



def main() -> None:
    """Run the bot."""
    # Create the Updater and pass it your bot's token.
    updater = Updater(TOKEN)

    # Get the dispatcher to register handlers
    dispatcher = updater.dispatcher

    # Setup conversation handler with the states FIRST and SECOND
    # Use the pattern parameter to pass CallbackQueries with specific
    # data pattern to the corresponding handlers.
    # ^ means "start of line/string"
    # $ means "end of line/string"
    # So ^ABC$ will only allow 'ABC'
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            START_KEYBOARD: start_keyboard

        },
        fallbacks=[CommandHandler('start', start)],
    )

    # Add ConversationHandler to dispatcher that will be used for handling updates
    dispatcher.add_handler(conv_handler)

    # Start the Bot
    updater.start_polling()

    # Run the bot until you press Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()


if __name__ == '__main__':
    main()
